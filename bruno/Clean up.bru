meta {
  name: Clean up
  type: http
  seq: 1
}

delete {
  url: {{url}}/recipes/{{id}}
  body: none
  auth: none
}

assert {
  res.status: eq 204
}

script:pre-request {
  console.log("#############");
  const fs = require('fs');
  const path = require('path');
  const cwd = bru.cwd();
  
  // Delete all vars
  bru.deleteVar('stop');
  bru.deleteVar('current_id');
  bru.deleteVar('body');
  bru.deleteVar('field');
  bru.deleteVar('delete_ids');
  bru.deleteVar('index');
  bru.deleteVar('indexes');
  bru.deleteVar('recipe_ids');

  if (!bru.hasVar("id")) {
  // we want to keep first recipe, inserted by application
    current_id = 2;
  } else {
    current_id = bru.getVar("id") + 1;
  }
  bru.setVar("id", current_id);
  
  // deletes all recipes created by the "Create" requests
  const data = JSON.parse(fs.readFileSync(path.join(bru.cwd(), 'create-recipes.json'), 'utf8')).filter(d=>d._field===undefined);
  bru.setVar("stop", data.length<=(current_id-1));
  console.log("Clean up all recipes before testing", current_id);
}

script:post-response {
  if(bru.getVar("stop") === false){
    bru.setNextRequest("Clean up");
  } else {
    bru.deleteVar("id")
    bru.deleteVar("stop")
  }
}
